//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using EduBestServiceStub.Lib.NoarkTypes;

namespace EduBestServiceStub.Service
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="noarkExchangeBinding", Namespace="http://www.arkivverket.no/Noark/Exchange")]
    [XmlInclude(typeof(PutJournpostResponseType))]
    [XmlInclude(typeof(PutJournpostRequestType))]
    [XmlInclude(typeof(GetJournpostResponseType))]
    [XmlInclude(typeof(GetJournpostRequestType))]
    [XmlInclude(typeof(PutNoarksakResponseType))]
    [XmlInclude(typeof(PutNoarksakRequestType))]
    [XmlInclude(typeof(GetNoarksakResponseType))]
    [XmlInclude(typeof(GetNoarksakRequestType))]
    [XmlInclude(typeof(MeldingType))]
    public partial class noarkExchange : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
        private System.Threading.SendOrPostCallback GetCanReceiveMessageOperationCompleted;
    
        private System.Threading.SendOrPostCallback PutMessageOperationCompleted;
    
        /// <remarks/>
        public noarkExchange() {
            
        }

        public noarkExchange(string endpointUrl)
        {
            Url = endpointUrl;
        }
    
        /// <remarks/>
        public event GetCanReceiveMessageCompletedEventHandler GetCanReceiveMessageCompleted;
    
        /// <remarks/>
        public event PutMessageCompletedEventHandler PutMessageCompleted;
    
        /// <remarks/>
        [SoapDocumentMethod("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: XmlElement("GetCanReceiveMessageResponse", Namespace="http://www.arkivverket.no/Noark/Exchange/types")]
        public GetCanReceiveMessageResponseType GetCanReceiveMessage([XmlElement(Namespace="http://www.arkivverket.no/Noark/Exchange/types")] GetCanReceiveMessageRequestType GetCanReceiveMessageRequest) {
            object[] results = this.Invoke("GetCanReceiveMessage", new object[] {
                GetCanReceiveMessageRequest});
            return ((GetCanReceiveMessageResponseType)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetCanReceiveMessage(GetCanReceiveMessageRequestType GetCanReceiveMessageRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCanReceiveMessage", new object[] {
                GetCanReceiveMessageRequest}, callback, asyncState);
        }
    
        /// <remarks/>
        public GetCanReceiveMessageResponseType EndGetCanReceiveMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetCanReceiveMessageResponseType)(results[0]));
        }
    
        /// <remarks/>
        public void GetCanReceiveMessageAsync(GetCanReceiveMessageRequestType GetCanReceiveMessageRequest) {
            this.GetCanReceiveMessageAsync(GetCanReceiveMessageRequest, null);
        }
    
        /// <remarks/>
        public void GetCanReceiveMessageAsync(GetCanReceiveMessageRequestType GetCanReceiveMessageRequest, object userState) {
            if ((this.GetCanReceiveMessageOperationCompleted == null)) {
                this.GetCanReceiveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCanReceiveMessageOperationCompleted);
            }
            this.InvokeAsync("GetCanReceiveMessage", new object[] {
                GetCanReceiveMessageRequest}, this.GetCanReceiveMessageOperationCompleted, userState);
        }
    
        private void OnGetCanReceiveMessageOperationCompleted(object arg) {
            if ((this.GetCanReceiveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCanReceiveMessageCompleted(this, new GetCanReceiveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [SoapDocumentMethod("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: XmlElement("PutMessageResponse", Namespace="http://www.arkivverket.no/Noark/Exchange/types")]
        public PutMessageResponseType PutMessage([XmlElement(Namespace="http://www.arkivverket.no/Noark/Exchange/types")] PutMessageRequestType PutMessageRequest) {
            object[] results = this.Invoke("PutMessage", new object[] {
                PutMessageRequest});
            return ((PutMessageResponseType)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginPutMessage(PutMessageRequestType PutMessageRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PutMessage", new object[] {
                PutMessageRequest}, callback, asyncState);
        }
    
        /// <remarks/>
        public PutMessageResponseType EndPutMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PutMessageResponseType)(results[0]));
        }
    
        /// <remarks/>
        public void PutMessageAsync(PutMessageRequestType PutMessageRequest) {
            this.PutMessageAsync(PutMessageRequest, null);
        }
    
        /// <remarks/>
        public void PutMessageAsync(PutMessageRequestType PutMessageRequest, object userState) {
            if ((this.PutMessageOperationCompleted == null)) {
                this.PutMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutMessageOperationCompleted);
            }
            this.InvokeAsync("PutMessage", new object[] {
                PutMessageRequest}, this.PutMessageOperationCompleted, userState);
        }
    
        private void OnPutMessageOperationCompleted(object arg) {
            if ((this.PutMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutMessageCompleted(this, new PutMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>



    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetCanReceiveMessageCompletedEventHandler(object sender, GetCanReceiveMessageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetCanReceiveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetCanReceiveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
            this.results = results;
            }
    
        /// <remarks/>
        public GetCanReceiveMessageResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetCanReceiveMessageResponseType)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PutMessageCompletedEventHandler(object sender, PutMessageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class PutMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal PutMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
            this.results = results;
            }
    
        /// <remarks/>
        public PutMessageResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PutMessageResponseType)(this.results[0]));
            }
        }
    }
}